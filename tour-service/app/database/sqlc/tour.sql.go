// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tour.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTour = `-- name: CreateTour :one
INSERT INTO tour (
    id,
    name,
    description,
    host_id,
    slot,
    status,
    start_at,
    end_at,
    created_at,
    updated_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, name, description, host_id, slot, status, start_at, end_at, created_at, updated_at
`

type CreateTourParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	HostID      uuid.UUID `json:"host_id"`
	Slot        int32     `json:"slot"`
	Status      string    `json:"status"`
	StartAt     time.Time `json:"start_at"`
	EndAt       time.Time `json:"end_at"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateTour(ctx context.Context, arg *CreateTourParams) (*Tour, error) {
	row := q.db.QueryRowContext(ctx, createTour,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.HostID,
		arg.Slot,
		arg.Status,
		arg.StartAt,
		arg.EndAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HostID,
		&i.Slot,
		&i.Status,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteTour = `-- name: DeleteTour :exec
DELETE FROM tour
WHERE id = $1
`

func (q *Queries) DeleteTour(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTour, id)
	return err
}

const getTourByID = `-- name: GetTourByID :one
SELECT id, name, description, host_id, slot, status, start_at, end_at, created_at, updated_at FROM tour
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTourByID(ctx context.Context, id uuid.UUID) (*Tour, error) {
	row := q.db.QueryRowContext(ctx, getTourByID, id)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HostID,
		&i.Slot,
		&i.Status,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTourForUpdate = `-- name: GetTourForUpdate :one
SELECT id, name, description, host_id, slot, status, start_at, end_at, created_at, updated_at FROM tour
WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetTourForUpdate(ctx context.Context, id uuid.UUID) (*Tour, error) {
	row := q.db.QueryRowContext(ctx, getTourForUpdate, id)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HostID,
		&i.Slot,
		&i.Status,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listTours = `-- name: ListTours :many
SELECT id, name, description, host_id, slot, status, start_at, end_at, created_at, updated_at FROM tour
WHERE host_id = $1
ORDER BY id
    LIMIT $2
OFFSET $3
`

type ListToursParams struct {
	HostID uuid.UUID `json:"host_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListTours(ctx context.Context, arg *ListToursParams) ([]*Tour, error) {
	rows, err := q.db.QueryContext(ctx, listTours, arg.HostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tour{}
	for rows.Next() {
		var i Tour
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.HostID,
			&i.Slot,
			&i.Status,
			&i.StartAt,
			&i.EndAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTour = `-- name: UpdateTour :exec
UPDATE tour
SET
    name = $2,
    description = $3,
    slot = $4,
    status = $5,
    start_at = $6,
    end_at = $7,
    updated_at = NOW()
WHERE id = $1 and updated_at = $8
`

type UpdateTourParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Slot        int32     `json:"slot"`
	Status      string    `json:"status"`
	StartAt     time.Time `json:"start_at"`
	EndAt       time.Time `json:"end_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateTour(ctx context.Context, arg *UpdateTourParams) error {
	_, err := q.db.ExecContext(ctx, updateTour,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Slot,
		arg.Status,
		arg.StartAt,
		arg.EndAt,
		arg.UpdatedAt,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO booking (
    id,
    user_id,
    tour_id,
    porter_id,
    quantity,
    total_price
) VALUES (
     $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, tour_id, porter_id, quantity, total_price, created_at, updated_at
`

type CreateBookingParams struct {
	ID         uuid.UUID     `json:"id"`
	UserID     uuid.UUID     `json:"user_id"`
	TourID     uuid.UUID     `json:"tour_id"`
	PorterID   uuid.NullUUID `json:"porter_id"`
	Quantity   int32         `json:"quantity"`
	TotalPrice int64         `json:"total_price"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg *CreateBookingParams) (*Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.ID,
		arg.UserID,
		arg.TourID,
		arg.PorterID,
		arg.Quantity,
		arg.TotalPrice,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TourID,
		&i.PorterID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM booking
WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, id)
	return err
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT id, user_id, tour_id, porter_id, quantity, total_price, created_at, updated_at FROM booking
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookingByID(ctx context.Context, id uuid.UUID) (*Booking, error) {
	row := q.db.QueryRowContext(ctx, getBookingByID, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TourID,
		&i.PorterID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getBookingForUpdate = `-- name: GetBookingForUpdate :one
SELECT id, user_id, tour_id, porter_id, quantity, total_price, created_at, updated_at FROM booking
WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetBookingForUpdate(ctx context.Context, id uuid.UUID) (*Booking, error) {
	row := q.db.QueryRowContext(ctx, getBookingForUpdate, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TourID,
		&i.PorterID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateBooking = `-- name: UpdateBooking :exec
UPDATE booking
SET
    user_id = $2,
    tour_id = $3,
    porter_id = $4,
    quantity = $5,
    total_price = $6,
    updated_at = NOW()
WHERE id = $1 AND updated_at = $7
`

type UpdateBookingParams struct {
	ID         uuid.UUID     `json:"id"`
	UserID     uuid.UUID     `json:"user_id"`
	TourID     uuid.UUID     `json:"tour_id"`
	PorterID   uuid.NullUUID `json:"porter_id"`
	Quantity   int32         `json:"quantity"`
	TotalPrice int64         `json:"total_price"`
	UpdatedAt  time.Time     `json:"updated_at"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg *UpdateBookingParams) error {
	_, err := q.db.ExecContext(ctx, updateBooking,
		arg.ID,
		arg.UserID,
		arg.TourID,
		arg.PorterID,
		arg.Quantity,
		arg.TotalPrice,
		arg.UpdatedAt,
	)
	return err
}

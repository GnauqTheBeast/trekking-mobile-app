// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: role.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "role";

export interface GetRoleIdRequest {
  roleName: string;
}

export interface GetRoleIdReponse {
  roleId: string | null;
}

export interface GetRoleNameRequest {
  roleId: string;
}

export interface getRoleNameReponse {
  roleName: string | null;
}

export const ROLE_PACKAGE_NAME = "role";

export interface RoleServiceClient {
  getRoleId(request: GetRoleIdRequest): Observable<GetRoleIdReponse>;

  getRoleName(request: GetRoleNameRequest): Observable<getRoleNameReponse>;
}

export interface RoleServiceController {
  getRoleId(request: GetRoleIdRequest): Promise<GetRoleIdReponse> | Observable<GetRoleIdReponse> | GetRoleIdReponse;

  getRoleName(
    request: GetRoleNameRequest,
  ): Promise<getRoleNameReponse> | Observable<getRoleNameReponse> | getRoleNameReponse;
}

export function RoleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getRoleId", "getRoleName"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROLE_SERVICE_NAME = "RoleService";

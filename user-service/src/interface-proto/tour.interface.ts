// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: tour.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "pb";

export interface TourReq {
  tourId: string;
}

export interface TourResp {
  tourId: string;
  name: string;
  description: string;
  hostId: string;
  slot: number;
  availableSlot: number;
  status: string;
  startAt: string;
  endAt: string;
  price: number;
  duration: string;
  distance: number;
  elevation: number;
  location: string;
  images: string;
  rate: string;
  level: string;
  createdAt: string;
  updatedAt: string;
}

export interface AvailableSlotReq {
  tourId: string;
  lockedSlot: number;
}

export interface AvailableSlotResp {
  tourId: string;
  name: string;
  description: string;
  hostId: string;
  slot: number;
  availableSlot: number;
  status: string;
  startAt: string;
  endAt: string;
  price: number;
  duration: string;
  distance: number;
  elevation: number;
  location: string;
  images: string;
  rate: string;
  level: string;
  createdAt: string;
  updatedAt: string;
}

export const PB_PACKAGE_NAME = "pb";

export interface TourServiceClient {
  checkTourExist(request: TourReq): Observable<TourResp>;

  updateTourAvailableSlot(request: AvailableSlotReq): Observable<AvailableSlotResp>;
}

export interface TourServiceController {
  checkTourExist(request: TourReq): Promise<TourResp> | Observable<TourResp> | TourResp;

  updateTourAvailableSlot(
    request: AvailableSlotReq,
  ): Promise<AvailableSlotResp> | Observable<AvailableSlotResp> | AvailableSlotResp;
}

export function TourServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["checkTourExist", "updateTourAvailableSlot"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TourService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TourService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TOUR_SERVICE_NAME = "TourService";

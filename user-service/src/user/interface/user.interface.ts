// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "user";

export interface User {
  id: string;
  email: string;
  fullname: string;
  roleId: string;
  roleName: string;
}

export interface UserInfo {
  id: string;
  email: string;
  fullname: string;
  phoneNumber: string | null;
  dob: string | null;
  address: string | null;
}

export interface CreateUserRequest {
  email: string;
  fullname: string;
  password: string;
  roleName: string;
}

export interface CheckLoginRequest {
  email: string;
  password: string;
}

export interface CheckLoginResponse {
  user: User | undefined;
}

export interface GetUserByIdRequest {
  id: string;
}

export interface GetUserByIdResponse {
  user: UserInfo | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<Empty>;

  checkLogin(request: CheckLoginRequest): Observable<CheckLoginResponse>;

  getUserById(request: GetUserByIdRequest): Observable<GetUserByIdResponse>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest): void;

  checkLogin(
    request: CheckLoginRequest,
  ): Promise<CheckLoginResponse> | Observable<CheckLoginResponse> | CheckLoginResponse;

  getUserById(
    request: GetUserByIdRequest,
  ): Promise<GetUserByIdResponse> | Observable<GetUserByIdResponse> | GetUserByIdResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "checkLogin", "getUserById"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

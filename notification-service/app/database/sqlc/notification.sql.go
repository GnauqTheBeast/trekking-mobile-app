// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notification.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO "notification" (
    id, user_id, name, description
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateNotificationParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg *CreateNotificationParams) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM "notification"
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, user_id, name, description, created_at, updated_at FROM "notification"
WHERE id = $1
`

func (q *Queries) GetNotificationByID(ctx context.Context, id uuid.UUID) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listNotificationsByUser = `-- name: ListNotificationsByUser :many
SELECT id, user_id, name, description, created_at, updated_at FROM "notification"
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListNotificationsByUser(ctx context.Context, userID uuid.UUID) ([]*Notification, error) {
	rows, err := q.db.QueryContext(ctx, listNotificationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE "notification"
SET
    name = $2,
    description = $3,
    updated_at = now()
WHERE id = $1
    RETURNING id, user_id, name, description, created_at, updated_at
`

type UpdateNotificationParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg *UpdateNotificationParams) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, updateNotification, arg.ID, arg.Name, arg.Description)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: role-permission.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "role_permission";

export interface GetAllPermissionByRoleIdRequest {
  roleId: string;
}

export interface GetAllPermissionByRoleIdResponse {
  status: number;
  message: string;
  permission: string[];
}

export const ROLE_PERMISSION_PACKAGE_NAME = "role_permission";

export interface RolePermissionServiceClient {
  getAllPermissionByRoleId(request: GetAllPermissionByRoleIdRequest): Observable<GetAllPermissionByRoleIdResponse>;
}

export interface RolePermissionServiceController {
  getAllPermissionByRoleId(
    request: GetAllPermissionByRoleIdRequest,
  ):
    | Promise<GetAllPermissionByRoleIdResponse>
    | Observable<GetAllPermissionByRoleIdResponse>
    | GetAllPermissionByRoleIdResponse;
}

export function RolePermissionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllPermissionByRoleId"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RolePermissionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RolePermissionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROLE_PERMISSION_SERVICE_NAME = "RolePermissionService";

version: "3.3"

services:
  tour-service:
    container_name: app_tour_service
    build:
      context: ./tour-service/.
      dockerfile: Dockerfile
    networks:
      - app
    env_file:
      - ./tour-service/cmd/.env
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka
      - zookeeper

  booking-service:
    container_name: app_booking_service
    build:
      context: ./booking-service/.
      dockerfile: Dockerfile
    networks:
      - app
    env_file:
      - ./booking-service/cmd/.env
    restart: unless-stopped
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - tour-service
      - redis

  notification-service:
    container_name: app_notification_service
    build:
      context: ./notification-service/.
      dockerfile: Dockerfile
    networks:
      - app
    env_file:
      - ./notification-service/cmd/.env
    restart: unless-stopped
    depends_on:
      - postgres
      - kafka
      - redis
      - zookeeper

  postgres:
    container_name: app_postgres
    image: postgres
    networks:
      - app
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  zookeeper:
    container_name: app_zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: app_kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: app_redis
    image: redis
    networks:
      - app
    volumes:
      - ./redis-data:/data
    restart: unless-stopped

  #  nginx:
  #    image: nginx:latest
  #    ports:
  #      - "80:80"
  #    volumes:
  #      - ./nginx.conf:/etc/nginx/conf.d/default.conf

networks:
  app: